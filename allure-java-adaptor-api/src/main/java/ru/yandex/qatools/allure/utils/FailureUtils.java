package ru.yandex.qatools.allure.utils;

import ru.yandex.qatools.allure.model.Failure;

import java.io.PrintWriter;
import java.io.StringWriter;

/**
 * User: alkedr
 * Date: 24.08.2014
 */
public final class FailureUtils {
    private FailureUtils() {
    }

    /**
     * Create failure from throwable using {@link #getMessage(Throwable)} and {@link #getStackTrace(Throwable)}
     *
     * @return created failure
     */
    public static Failure createFailureFromThrowable(Throwable throwable) {
        return new Failure()
                .withMessage(getMessage(throwable))
                .withStackTrace(getStackTrace(throwable));
    }

    /**
     * Create default failure (if throwable not specified)
     *
     * @return default failure
     */
    public static Failure createDefaultFailure(String message) {
        return new Failure()
                .withMessage(message)
                .withStackTrace("There is no stack trace");
    }


    /**
     * Gets a short message summarising the exception.
     * <p/>
     * The message returned is of the form
     * {ClassNameWithoutPackage}: {ThrowableMessage}
     *
     * @param throwable the throwable to get a message for
     * @return the message
     */
    private static String getMessage(Throwable throwable) {
        return String.format("%s: %s", throwable.getClass().getSimpleName(), throwable.getMessage());
    }

    /**
     * <p>Gets the stack trace from a Throwable as a String.</p>
     * <p/>
     * <p>The result of this method vary by JDK version as this method
     * uses {@link Throwable#printStackTrace(java.io.PrintWriter)}.
     * On JDK1.3 and earlier, the cause exception will not be shown
     * unless the specified throwable alters printStackTrace.</p>
     *
     * @param throwable the <code>Throwable</code> to be examined
     * @return the stack trace as generated by the exception's
     * <code>printStackTrace(PrintWriter)</code> method
     */
    @SuppressWarnings("all")
    private static String getStackTrace(Throwable throwable) {
        StringWriter sw = new StringWriter();
        PrintWriter pw = new PrintWriter(sw, true);
        throwable.printStackTrace(pw);
        return sw.getBuffer().toString();
    }
}
